/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package edu.rice.bold.service;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-08-23")
public class BcdService {

  /**
   * ahh, now onto the cool part, defining a service. services just need a name
   * and can optionally inherit from another service using the extends keyword.
   */
  public interface Iface {

    /**
     * a method definition looks like c code. it has a return type, arguments,
     * and optionally a list of exceptions that it may throw. note that argument
     * lists and exception lists are specified using the exact same syntax as
     * field lists in struct or exception definitions.
     * 
     * @param master
     * @param slaves
     * @param data
     */
    public PushReply push(String master, Set<String> slaves, BcdInfo data) throws org.apache.thrift.TException;

    /**
     * this method has a oneway modifier. that means the client only makes
     * a request and does not listen for any response at all. oneway methods
     * must be void.
     * 
     * @param xid
     */
    public void unpush(int xid) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void push(String master, Set<String> slaves, BcdInfo data, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void unpush(int xid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public PushReply push(String master, Set<String> slaves, BcdInfo data) throws org.apache.thrift.TException
    {
      send_push(master, slaves, data);
      return recv_push();
    }

    public void send_push(String master, Set<String> slaves, BcdInfo data) throws org.apache.thrift.TException
    {
      push_args args = new push_args();
      args.setMaster(master);
      args.setSlaves(slaves);
      args.setData(data);
      sendBase("push", args);
    }

    public PushReply recv_push() throws org.apache.thrift.TException
    {
      push_result result = new push_result();
      receiveBase(result, "push");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "push failed: unknown result");
    }

    public void unpush(int xid) throws org.apache.thrift.TException
    {
      send_unpush(xid);
    }

    public void send_unpush(int xid) throws org.apache.thrift.TException
    {
      unpush_args args = new unpush_args();
      args.setXid(xid);
      sendBaseOneway("unpush", args);
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void push(String master, Set<String> slaves, BcdInfo data, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      push_call method_call = new push_call(master, slaves, data, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class push_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String master;
      private Set<String> slaves;
      private BcdInfo data;
      public push_call(String master, Set<String> slaves, BcdInfo data, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.master = master;
        this.slaves = slaves;
        this.data = data;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("push", org.apache.thrift.protocol.TMessageType.CALL, 0));
        push_args args = new push_args();
        args.setMaster(master);
        args.setSlaves(slaves);
        args.setData(data);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public PushReply getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_push();
      }
    }

    public void unpush(int xid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      unpush_call method_call = new unpush_call(xid, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class unpush_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int xid;
      public unpush_call(int xid, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.xid = xid;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("unpush", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
        unpush_args args = new unpush_args();
        args.setXid(xid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("push", new push());
      processMap.put("unpush", new unpush());
      return processMap;
    }

    public static class push<I extends Iface> extends org.apache.thrift.ProcessFunction<I, push_args> {
      public push() {
        super("push");
      }

      public push_args getEmptyArgsInstance() {
        return new push_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public push_result getResult(I iface, push_args args) throws org.apache.thrift.TException {
        push_result result = new push_result();
        result.success = iface.push(args.master, args.slaves, args.data);
        return result;
      }
    }

    public static class unpush<I extends Iface> extends org.apache.thrift.ProcessFunction<I, unpush_args> {
      public unpush() {
        super("unpush");
      }

      public unpush_args getEmptyArgsInstance() {
        return new unpush_args();
      }

      protected boolean isOneway() {
        return true;
      }

      public org.apache.thrift.TBase getResult(I iface, unpush_args args) throws org.apache.thrift.TException {
        iface.unpush(args.xid);
        return null;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("push", new push());
      processMap.put("unpush", new unpush());
      return processMap;
    }

    public static class push<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, push_args, PushReply> {
      public push() {
        super("push");
      }

      public push_args getEmptyArgsInstance() {
        return new push_args();
      }

      public AsyncMethodCallback<PushReply> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<PushReply>() { 
          public void onComplete(PushReply o) {
            push_result result = new push_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            push_result result = new push_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, push_args args, org.apache.thrift.async.AsyncMethodCallback<PushReply> resultHandler) throws TException {
        iface.push(args.master, args.slaves, args.data,resultHandler);
      }
    }

    public static class unpush<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, unpush_args, Void> {
      public unpush() {
        super("unpush");
      }

      public unpush_args getEmptyArgsInstance() {
        return new unpush_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
          }
          public void onError(Exception e) {
          }
        };
      }

      protected boolean isOneway() {
        return true;
      }

      public void start(I iface, unpush_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.unpush(args.xid,resultHandler);
      }
    }

  }

  public static class push_args implements org.apache.thrift.TBase<push_args, push_args._Fields>, java.io.Serializable, Cloneable, Comparable<push_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("push_args");

    private static final org.apache.thrift.protocol.TField MASTER_FIELD_DESC = new org.apache.thrift.protocol.TField("master", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField SLAVES_FIELD_DESC = new org.apache.thrift.protocol.TField("slaves", org.apache.thrift.protocol.TType.SET, (short)2);
    private static final org.apache.thrift.protocol.TField DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("data", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new push_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new push_argsTupleSchemeFactory());
    }

    public String master; // required
    public Set<String> slaves; // required
    public BcdInfo data; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MASTER((short)1, "master"),
      SLAVES((short)2, "slaves"),
      DATA((short)3, "data");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MASTER
            return MASTER;
          case 2: // SLAVES
            return SLAVES;
          case 3: // DATA
            return DATA;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MASTER, new org.apache.thrift.meta_data.FieldMetaData("master", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "ServerID")));
      tmpMap.put(_Fields.SLAVES, new org.apache.thrift.meta_data.FieldMetaData("slaves", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING              , "ServerID"))));
      tmpMap.put(_Fields.DATA, new org.apache.thrift.meta_data.FieldMetaData("data", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BcdInfo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(push_args.class, metaDataMap);
    }

    public push_args() {
    }

    public push_args(
      String master,
      Set<String> slaves,
      BcdInfo data)
    {
      this();
      this.master = master;
      this.slaves = slaves;
      this.data = data;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public push_args(push_args other) {
      if (other.isSetMaster()) {
        this.master = other.master;
      }
      if (other.isSetSlaves()) {
        Set<String> __this__slaves = new HashSet<String>(other.slaves.size());
        for (String other_element : other.slaves) {
          __this__slaves.add(other_element);
        }
        this.slaves = __this__slaves;
      }
      if (other.isSetData()) {
        this.data = new BcdInfo(other.data);
      }
    }

    public push_args deepCopy() {
      return new push_args(this);
    }

    @Override
    public void clear() {
      this.master = null;
      this.slaves = null;
      this.data = null;
    }

    public String getMaster() {
      return this.master;
    }

    public push_args setMaster(String master) {
      this.master = master;
      return this;
    }

    public void unsetMaster() {
      this.master = null;
    }

    /** Returns true if field master is set (has been assigned a value) and false otherwise */
    public boolean isSetMaster() {
      return this.master != null;
    }

    public void setMasterIsSet(boolean value) {
      if (!value) {
        this.master = null;
      }
    }

    public int getSlavesSize() {
      return (this.slaves == null) ? 0 : this.slaves.size();
    }

    public java.util.Iterator<String> getSlavesIterator() {
      return (this.slaves == null) ? null : this.slaves.iterator();
    }

    public void addToSlaves(String elem) {
      if (this.slaves == null) {
        this.slaves = new HashSet<String>();
      }
      this.slaves.add(elem);
    }

    public Set<String> getSlaves() {
      return this.slaves;
    }

    public push_args setSlaves(Set<String> slaves) {
      this.slaves = slaves;
      return this;
    }

    public void unsetSlaves() {
      this.slaves = null;
    }

    /** Returns true if field slaves is set (has been assigned a value) and false otherwise */
    public boolean isSetSlaves() {
      return this.slaves != null;
    }

    public void setSlavesIsSet(boolean value) {
      if (!value) {
        this.slaves = null;
      }
    }

    public BcdInfo getData() {
      return this.data;
    }

    public push_args setData(BcdInfo data) {
      this.data = data;
      return this;
    }

    public void unsetData() {
      this.data = null;
    }

    /** Returns true if field data is set (has been assigned a value) and false otherwise */
    public boolean isSetData() {
      return this.data != null;
    }

    public void setDataIsSet(boolean value) {
      if (!value) {
        this.data = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MASTER:
        if (value == null) {
          unsetMaster();
        } else {
          setMaster((String)value);
        }
        break;

      case SLAVES:
        if (value == null) {
          unsetSlaves();
        } else {
          setSlaves((Set<String>)value);
        }
        break;

      case DATA:
        if (value == null) {
          unsetData();
        } else {
          setData((BcdInfo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MASTER:
        return getMaster();

      case SLAVES:
        return getSlaves();

      case DATA:
        return getData();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MASTER:
        return isSetMaster();
      case SLAVES:
        return isSetSlaves();
      case DATA:
        return isSetData();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof push_args)
        return this.equals((push_args)that);
      return false;
    }

    public boolean equals(push_args that) {
      if (that == null)
        return false;

      boolean this_present_master = true && this.isSetMaster();
      boolean that_present_master = true && that.isSetMaster();
      if (this_present_master || that_present_master) {
        if (!(this_present_master && that_present_master))
          return false;
        if (!this.master.equals(that.master))
          return false;
      }

      boolean this_present_slaves = true && this.isSetSlaves();
      boolean that_present_slaves = true && that.isSetSlaves();
      if (this_present_slaves || that_present_slaves) {
        if (!(this_present_slaves && that_present_slaves))
          return false;
        if (!this.slaves.equals(that.slaves))
          return false;
      }

      boolean this_present_data = true && this.isSetData();
      boolean that_present_data = true && that.isSetData();
      if (this_present_data || that_present_data) {
        if (!(this_present_data && that_present_data))
          return false;
        if (!this.data.equals(that.data))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_master = true && (isSetMaster());
      list.add(present_master);
      if (present_master)
        list.add(master);

      boolean present_slaves = true && (isSetSlaves());
      list.add(present_slaves);
      if (present_slaves)
        list.add(slaves);

      boolean present_data = true && (isSetData());
      list.add(present_data);
      if (present_data)
        list.add(data);

      return list.hashCode();
    }

    @Override
    public int compareTo(push_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetMaster()).compareTo(other.isSetMaster());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMaster()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.master, other.master);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSlaves()).compareTo(other.isSetSlaves());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSlaves()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.slaves, other.slaves);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetData()).compareTo(other.isSetData());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetData()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.data, other.data);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("push_args(");
      boolean first = true;

      sb.append("master:");
      if (this.master == null) {
        sb.append("null");
      } else {
        sb.append(this.master);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("slaves:");
      if (this.slaves == null) {
        sb.append("null");
      } else {
        sb.append(this.slaves);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("data:");
      if (this.data == null) {
        sb.append("null");
      } else {
        sb.append(this.data);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (data != null) {
        data.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class push_argsStandardSchemeFactory implements SchemeFactory {
      public push_argsStandardScheme getScheme() {
        return new push_argsStandardScheme();
      }
    }

    private static class push_argsStandardScheme extends StandardScheme<push_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, push_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MASTER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.master = iprot.readString();
                struct.setMasterIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SLAVES
              if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
                {
                  org.apache.thrift.protocol.TSet _set0 = iprot.readSetBegin();
                  struct.slaves = new HashSet<String>(2*_set0.size);
                  String _elem1;
                  for (int _i2 = 0; _i2 < _set0.size; ++_i2)
                  {
                    _elem1 = iprot.readString();
                    struct.slaves.add(_elem1);
                  }
                  iprot.readSetEnd();
                }
                struct.setSlavesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // DATA
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.data = new BcdInfo();
                struct.data.read(iprot);
                struct.setDataIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, push_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.master != null) {
          oprot.writeFieldBegin(MASTER_FIELD_DESC);
          oprot.writeString(struct.master);
          oprot.writeFieldEnd();
        }
        if (struct.slaves != null) {
          oprot.writeFieldBegin(SLAVES_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, struct.slaves.size()));
            for (String _iter3 : struct.slaves)
            {
              oprot.writeString(_iter3);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.data != null) {
          oprot.writeFieldBegin(DATA_FIELD_DESC);
          struct.data.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class push_argsTupleSchemeFactory implements SchemeFactory {
      public push_argsTupleScheme getScheme() {
        return new push_argsTupleScheme();
      }
    }

    private static class push_argsTupleScheme extends TupleScheme<push_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, push_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMaster()) {
          optionals.set(0);
        }
        if (struct.isSetSlaves()) {
          optionals.set(1);
        }
        if (struct.isSetData()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetMaster()) {
          oprot.writeString(struct.master);
        }
        if (struct.isSetSlaves()) {
          {
            oprot.writeI32(struct.slaves.size());
            for (String _iter4 : struct.slaves)
            {
              oprot.writeString(_iter4);
            }
          }
        }
        if (struct.isSetData()) {
          struct.data.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, push_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.master = iprot.readString();
          struct.setMasterIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TSet _set5 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.slaves = new HashSet<String>(2*_set5.size);
            String _elem6;
            for (int _i7 = 0; _i7 < _set5.size; ++_i7)
            {
              _elem6 = iprot.readString();
              struct.slaves.add(_elem6);
            }
          }
          struct.setSlavesIsSet(true);
        }
        if (incoming.get(2)) {
          struct.data = new BcdInfo();
          struct.data.read(iprot);
          struct.setDataIsSet(true);
        }
      }
    }

  }

  public static class push_result implements org.apache.thrift.TBase<push_result, push_result._Fields>, java.io.Serializable, Cloneable, Comparable<push_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("push_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new push_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new push_resultTupleSchemeFactory());
    }

    public PushReply success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PushReply.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(push_result.class, metaDataMap);
    }

    public push_result() {
    }

    public push_result(
      PushReply success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public push_result(push_result other) {
      if (other.isSetSuccess()) {
        this.success = new PushReply(other.success);
      }
    }

    public push_result deepCopy() {
      return new push_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public PushReply getSuccess() {
      return this.success;
    }

    public push_result setSuccess(PushReply success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((PushReply)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof push_result)
        return this.equals((push_result)that);
      return false;
    }

    public boolean equals(push_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(push_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("push_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class push_resultStandardSchemeFactory implements SchemeFactory {
      public push_resultStandardScheme getScheme() {
        return new push_resultStandardScheme();
      }
    }

    private static class push_resultStandardScheme extends StandardScheme<push_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, push_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new PushReply();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, push_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class push_resultTupleSchemeFactory implements SchemeFactory {
      public push_resultTupleScheme getScheme() {
        return new push_resultTupleScheme();
      }
    }

    private static class push_resultTupleScheme extends TupleScheme<push_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, push_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, push_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new PushReply();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class unpush_args implements org.apache.thrift.TBase<unpush_args, unpush_args._Fields>, java.io.Serializable, Cloneable, Comparable<unpush_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("unpush_args");

    private static final org.apache.thrift.protocol.TField XID_FIELD_DESC = new org.apache.thrift.protocol.TField("xid", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new unpush_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new unpush_argsTupleSchemeFactory());
    }

    public int xid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      XID((short)1, "xid");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // XID
            return XID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __XID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.XID, new org.apache.thrift.meta_data.FieldMetaData("xid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(unpush_args.class, metaDataMap);
    }

    public unpush_args() {
    }

    public unpush_args(
      int xid)
    {
      this();
      this.xid = xid;
      setXidIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public unpush_args(unpush_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.xid = other.xid;
    }

    public unpush_args deepCopy() {
      return new unpush_args(this);
    }

    @Override
    public void clear() {
      setXidIsSet(false);
      this.xid = 0;
    }

    public int getXid() {
      return this.xid;
    }

    public unpush_args setXid(int xid) {
      this.xid = xid;
      setXidIsSet(true);
      return this;
    }

    public void unsetXid() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __XID_ISSET_ID);
    }

    /** Returns true if field xid is set (has been assigned a value) and false otherwise */
    public boolean isSetXid() {
      return EncodingUtils.testBit(__isset_bitfield, __XID_ISSET_ID);
    }

    public void setXidIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __XID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case XID:
        if (value == null) {
          unsetXid();
        } else {
          setXid((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case XID:
        return getXid();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case XID:
        return isSetXid();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof unpush_args)
        return this.equals((unpush_args)that);
      return false;
    }

    public boolean equals(unpush_args that) {
      if (that == null)
        return false;

      boolean this_present_xid = true;
      boolean that_present_xid = true;
      if (this_present_xid || that_present_xid) {
        if (!(this_present_xid && that_present_xid))
          return false;
        if (this.xid != that.xid)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_xid = true;
      list.add(present_xid);
      if (present_xid)
        list.add(xid);

      return list.hashCode();
    }

    @Override
    public int compareTo(unpush_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetXid()).compareTo(other.isSetXid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetXid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.xid, other.xid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("unpush_args(");
      boolean first = true;

      sb.append("xid:");
      sb.append(this.xid);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class unpush_argsStandardSchemeFactory implements SchemeFactory {
      public unpush_argsStandardScheme getScheme() {
        return new unpush_argsStandardScheme();
      }
    }

    private static class unpush_argsStandardScheme extends StandardScheme<unpush_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, unpush_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // XID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.xid = iprot.readI32();
                struct.setXidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, unpush_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(XID_FIELD_DESC);
        oprot.writeI32(struct.xid);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class unpush_argsTupleSchemeFactory implements SchemeFactory {
      public unpush_argsTupleScheme getScheme() {
        return new unpush_argsTupleScheme();
      }
    }

    private static class unpush_argsTupleScheme extends TupleScheme<unpush_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, unpush_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetXid()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetXid()) {
          oprot.writeI32(struct.xid);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, unpush_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.xid = iprot.readI32();
          struct.setXidIsSet(true);
        }
      }
    }

  }

}
