/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package edu.rice.republic.amif;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2018-03-26")
public class Request implements org.apache.thrift.TBase<Request, Request._Fields>, java.io.Serializable, Cloneable, Comparable<Request> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Request");

  private static final org.apache.thrift.protocol.TField RQID_FIELD_DESC = new org.apache.thrift.protocol.TField("rqid", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField AID_FIELD_DESC = new org.apache.thrift.protocol.TField("aid", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField DID_FIELD_DESC = new org.apache.thrift.protocol.TField("did", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField DATASIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("datasize", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField REMAININGSIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("remainingsize", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField SENDER_FIELD_DESC = new org.apache.thrift.protocol.TField("sender", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField RECEIVERS_FIELD_DESC = new org.apache.thrift.protocol.TField("receivers", org.apache.thrift.protocol.TType.SET, (short)7);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new RequestStandardSchemeFactory());
    schemes.put(TupleScheme.class, new RequestTupleSchemeFactory());
  }

  public String rqid; // required
  public String aid; // required
  public String did; // required
  public long datasize; // required
  public long remainingsize; // required
  public String sender; // required
  public Set<String> receivers; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    RQID((short)1, "rqid"),
    AID((short)2, "aid"),
    DID((short)3, "did"),
    DATASIZE((short)4, "datasize"),
    REMAININGSIZE((short)5, "remainingsize"),
    SENDER((short)6, "sender"),
    RECEIVERS((short)7, "receivers");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // RQID
          return RQID;
        case 2: // AID
          return AID;
        case 3: // DID
          return DID;
        case 4: // DATASIZE
          return DATASIZE;
        case 5: // REMAININGSIZE
          return REMAININGSIZE;
        case 6: // SENDER
          return SENDER;
        case 7: // RECEIVERS
          return RECEIVERS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __DATASIZE_ISSET_ID = 0;
  private static final int __REMAININGSIZE_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.RQID, new org.apache.thrift.meta_data.FieldMetaData("rqid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "RequestID")));
    tmpMap.put(_Fields.AID, new org.apache.thrift.meta_data.FieldMetaData("aid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "AppID")));
    tmpMap.put(_Fields.DID, new org.apache.thrift.meta_data.FieldMetaData("did", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "DataID")));
    tmpMap.put(_Fields.DATASIZE, new org.apache.thrift.meta_data.FieldMetaData("datasize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "Bytes")));
    tmpMap.put(_Fields.REMAININGSIZE, new org.apache.thrift.meta_data.FieldMetaData("remainingsize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "Bytes")));
    tmpMap.put(_Fields.SENDER, new org.apache.thrift.meta_data.FieldMetaData("sender", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "ServerID")));
    tmpMap.put(_Fields.RECEIVERS, new org.apache.thrift.meta_data.FieldMetaData("receivers", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING            , "ServerID"))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Request.class, metaDataMap);
  }

  public Request() {
  }

  public Request(
    String rqid,
    String aid,
    String did,
    long datasize,
    long remainingsize,
    String sender,
    Set<String> receivers)
  {
    this();
    this.rqid = rqid;
    this.aid = aid;
    this.did = did;
    this.datasize = datasize;
    setDatasizeIsSet(true);
    this.remainingsize = remainingsize;
    setRemainingsizeIsSet(true);
    this.sender = sender;
    this.receivers = receivers;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Request(Request other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetRqid()) {
      this.rqid = other.rqid;
    }
    if (other.isSetAid()) {
      this.aid = other.aid;
    }
    if (other.isSetDid()) {
      this.did = other.did;
    }
    this.datasize = other.datasize;
    this.remainingsize = other.remainingsize;
    if (other.isSetSender()) {
      this.sender = other.sender;
    }
    if (other.isSetReceivers()) {
      Set<String> __this__receivers = new HashSet<String>(other.receivers.size());
      for (String other_element : other.receivers) {
        __this__receivers.add(other_element);
      }
      this.receivers = __this__receivers;
    }
  }

  public Request deepCopy() {
    return new Request(this);
  }

  @Override
  public void clear() {
    this.rqid = null;
    this.aid = null;
    this.did = null;
    setDatasizeIsSet(false);
    this.datasize = 0;
    setRemainingsizeIsSet(false);
    this.remainingsize = 0;
    this.sender = null;
    this.receivers = null;
  }

  public String getRqid() {
    return this.rqid;
  }

  public Request setRqid(String rqid) {
    this.rqid = rqid;
    return this;
  }

  public void unsetRqid() {
    this.rqid = null;
  }

  /** Returns true if field rqid is set (has been assigned a value) and false otherwise */
  public boolean isSetRqid() {
    return this.rqid != null;
  }

  public void setRqidIsSet(boolean value) {
    if (!value) {
      this.rqid = null;
    }
  }

  public String getAid() {
    return this.aid;
  }

  public Request setAid(String aid) {
    this.aid = aid;
    return this;
  }

  public void unsetAid() {
    this.aid = null;
  }

  /** Returns true if field aid is set (has been assigned a value) and false otherwise */
  public boolean isSetAid() {
    return this.aid != null;
  }

  public void setAidIsSet(boolean value) {
    if (!value) {
      this.aid = null;
    }
  }

  public String getDid() {
    return this.did;
  }

  public Request setDid(String did) {
    this.did = did;
    return this;
  }

  public void unsetDid() {
    this.did = null;
  }

  /** Returns true if field did is set (has been assigned a value) and false otherwise */
  public boolean isSetDid() {
    return this.did != null;
  }

  public void setDidIsSet(boolean value) {
    if (!value) {
      this.did = null;
    }
  }

  public long getDatasize() {
    return this.datasize;
  }

  public Request setDatasize(long datasize) {
    this.datasize = datasize;
    setDatasizeIsSet(true);
    return this;
  }

  public void unsetDatasize() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DATASIZE_ISSET_ID);
  }

  /** Returns true if field datasize is set (has been assigned a value) and false otherwise */
  public boolean isSetDatasize() {
    return EncodingUtils.testBit(__isset_bitfield, __DATASIZE_ISSET_ID);
  }

  public void setDatasizeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DATASIZE_ISSET_ID, value);
  }

  public long getRemainingsize() {
    return this.remainingsize;
  }

  public Request setRemainingsize(long remainingsize) {
    this.remainingsize = remainingsize;
    setRemainingsizeIsSet(true);
    return this;
  }

  public void unsetRemainingsize() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REMAININGSIZE_ISSET_ID);
  }

  /** Returns true if field remainingsize is set (has been assigned a value) and false otherwise */
  public boolean isSetRemainingsize() {
    return EncodingUtils.testBit(__isset_bitfield, __REMAININGSIZE_ISSET_ID);
  }

  public void setRemainingsizeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REMAININGSIZE_ISSET_ID, value);
  }

  public String getSender() {
    return this.sender;
  }

  public Request setSender(String sender) {
    this.sender = sender;
    return this;
  }

  public void unsetSender() {
    this.sender = null;
  }

  /** Returns true if field sender is set (has been assigned a value) and false otherwise */
  public boolean isSetSender() {
    return this.sender != null;
  }

  public void setSenderIsSet(boolean value) {
    if (!value) {
      this.sender = null;
    }
  }

  public int getReceiversSize() {
    return (this.receivers == null) ? 0 : this.receivers.size();
  }

  public java.util.Iterator<String> getReceiversIterator() {
    return (this.receivers == null) ? null : this.receivers.iterator();
  }

  public void addToReceivers(String elem) {
    if (this.receivers == null) {
      this.receivers = new HashSet<String>();
    }
    this.receivers.add(elem);
  }

  public Set<String> getReceivers() {
    return this.receivers;
  }

  public Request setReceivers(Set<String> receivers) {
    this.receivers = receivers;
    return this;
  }

  public void unsetReceivers() {
    this.receivers = null;
  }

  /** Returns true if field receivers is set (has been assigned a value) and false otherwise */
  public boolean isSetReceivers() {
    return this.receivers != null;
  }

  public void setReceiversIsSet(boolean value) {
    if (!value) {
      this.receivers = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case RQID:
      if (value == null) {
        unsetRqid();
      } else {
        setRqid((String)value);
      }
      break;

    case AID:
      if (value == null) {
        unsetAid();
      } else {
        setAid((String)value);
      }
      break;

    case DID:
      if (value == null) {
        unsetDid();
      } else {
        setDid((String)value);
      }
      break;

    case DATASIZE:
      if (value == null) {
        unsetDatasize();
      } else {
        setDatasize((Long)value);
      }
      break;

    case REMAININGSIZE:
      if (value == null) {
        unsetRemainingsize();
      } else {
        setRemainingsize((Long)value);
      }
      break;

    case SENDER:
      if (value == null) {
        unsetSender();
      } else {
        setSender((String)value);
      }
      break;

    case RECEIVERS:
      if (value == null) {
        unsetReceivers();
      } else {
        setReceivers((Set<String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case RQID:
      return getRqid();

    case AID:
      return getAid();

    case DID:
      return getDid();

    case DATASIZE:
      return getDatasize();

    case REMAININGSIZE:
      return getRemainingsize();

    case SENDER:
      return getSender();

    case RECEIVERS:
      return getReceivers();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case RQID:
      return isSetRqid();
    case AID:
      return isSetAid();
    case DID:
      return isSetDid();
    case DATASIZE:
      return isSetDatasize();
    case REMAININGSIZE:
      return isSetRemainingsize();
    case SENDER:
      return isSetSender();
    case RECEIVERS:
      return isSetReceivers();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Request)
      return this.equals((Request)that);
    return false;
  }

  public boolean equals(Request that) {
    if (that == null)
      return false;

    boolean this_present_rqid = true && this.isSetRqid();
    boolean that_present_rqid = true && that.isSetRqid();
    if (this_present_rqid || that_present_rqid) {
      if (!(this_present_rqid && that_present_rqid))
        return false;
      if (!this.rqid.equals(that.rqid))
        return false;
    }

    boolean this_present_aid = true && this.isSetAid();
    boolean that_present_aid = true && that.isSetAid();
    if (this_present_aid || that_present_aid) {
      if (!(this_present_aid && that_present_aid))
        return false;
      if (!this.aid.equals(that.aid))
        return false;
    }

    boolean this_present_did = true && this.isSetDid();
    boolean that_present_did = true && that.isSetDid();
    if (this_present_did || that_present_did) {
      if (!(this_present_did && that_present_did))
        return false;
      if (!this.did.equals(that.did))
        return false;
    }

    boolean this_present_datasize = true;
    boolean that_present_datasize = true;
    if (this_present_datasize || that_present_datasize) {
      if (!(this_present_datasize && that_present_datasize))
        return false;
      if (this.datasize != that.datasize)
        return false;
    }

    boolean this_present_remainingsize = true;
    boolean that_present_remainingsize = true;
    if (this_present_remainingsize || that_present_remainingsize) {
      if (!(this_present_remainingsize && that_present_remainingsize))
        return false;
      if (this.remainingsize != that.remainingsize)
        return false;
    }

    boolean this_present_sender = true && this.isSetSender();
    boolean that_present_sender = true && that.isSetSender();
    if (this_present_sender || that_present_sender) {
      if (!(this_present_sender && that_present_sender))
        return false;
      if (!this.sender.equals(that.sender))
        return false;
    }

    boolean this_present_receivers = true && this.isSetReceivers();
    boolean that_present_receivers = true && that.isSetReceivers();
    if (this_present_receivers || that_present_receivers) {
      if (!(this_present_receivers && that_present_receivers))
        return false;
      if (!this.receivers.equals(that.receivers))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_rqid = true && (isSetRqid());
    list.add(present_rqid);
    if (present_rqid)
      list.add(rqid);

    boolean present_aid = true && (isSetAid());
    list.add(present_aid);
    if (present_aid)
      list.add(aid);

    boolean present_did = true && (isSetDid());
    list.add(present_did);
    if (present_did)
      list.add(did);

    boolean present_datasize = true;
    list.add(present_datasize);
    if (present_datasize)
      list.add(datasize);

    boolean present_remainingsize = true;
    list.add(present_remainingsize);
    if (present_remainingsize)
      list.add(remainingsize);

    boolean present_sender = true && (isSetSender());
    list.add(present_sender);
    if (present_sender)
      list.add(sender);

    boolean present_receivers = true && (isSetReceivers());
    list.add(present_receivers);
    if (present_receivers)
      list.add(receivers);

    return list.hashCode();
  }

  @Override
  public int compareTo(Request other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetRqid()).compareTo(other.isSetRqid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRqid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rqid, other.rqid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAid()).compareTo(other.isSetAid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.aid, other.aid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDid()).compareTo(other.isSetDid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.did, other.did);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDatasize()).compareTo(other.isSetDatasize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDatasize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.datasize, other.datasize);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRemainingsize()).compareTo(other.isSetRemainingsize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRemainingsize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.remainingsize, other.remainingsize);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSender()).compareTo(other.isSetSender());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSender()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sender, other.sender);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReceivers()).compareTo(other.isSetReceivers());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReceivers()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.receivers, other.receivers);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Request(");
    boolean first = true;

    sb.append("rqid:");
    if (this.rqid == null) {
      sb.append("null");
    } else {
      sb.append(this.rqid);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("aid:");
    if (this.aid == null) {
      sb.append("null");
    } else {
      sb.append(this.aid);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("did:");
    if (this.did == null) {
      sb.append("null");
    } else {
      sb.append(this.did);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("datasize:");
    sb.append(this.datasize);
    first = false;
    if (!first) sb.append(", ");
    sb.append("remainingsize:");
    sb.append(this.remainingsize);
    first = false;
    if (!first) sb.append(", ");
    sb.append("sender:");
    if (this.sender == null) {
      sb.append("null");
    } else {
      sb.append(this.sender);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("receivers:");
    if (this.receivers == null) {
      sb.append("null");
    } else {
      sb.append(this.receivers);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class RequestStandardSchemeFactory implements SchemeFactory {
    public RequestStandardScheme getScheme() {
      return new RequestStandardScheme();
    }
  }

  private static class RequestStandardScheme extends StandardScheme<Request> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Request struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // RQID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.rqid = iprot.readString();
              struct.setRqidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // AID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.aid = iprot.readString();
              struct.setAidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.did = iprot.readString();
              struct.setDidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // DATASIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.datasize = iprot.readI64();
              struct.setDatasizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // REMAININGSIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.remainingsize = iprot.readI64();
              struct.setRemainingsizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // SENDER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sender = iprot.readString();
              struct.setSenderIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // RECEIVERS
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set0 = iprot.readSetBegin();
                struct.receivers = new HashSet<String>(2*_set0.size);
                String _elem1;
                for (int _i2 = 0; _i2 < _set0.size; ++_i2)
                {
                  _elem1 = iprot.readString();
                  struct.receivers.add(_elem1);
                }
                iprot.readSetEnd();
              }
              struct.setReceiversIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Request struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.rqid != null) {
        oprot.writeFieldBegin(RQID_FIELD_DESC);
        oprot.writeString(struct.rqid);
        oprot.writeFieldEnd();
      }
      if (struct.aid != null) {
        oprot.writeFieldBegin(AID_FIELD_DESC);
        oprot.writeString(struct.aid);
        oprot.writeFieldEnd();
      }
      if (struct.did != null) {
        oprot.writeFieldBegin(DID_FIELD_DESC);
        oprot.writeString(struct.did);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(DATASIZE_FIELD_DESC);
      oprot.writeI64(struct.datasize);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REMAININGSIZE_FIELD_DESC);
      oprot.writeI64(struct.remainingsize);
      oprot.writeFieldEnd();
      if (struct.sender != null) {
        oprot.writeFieldBegin(SENDER_FIELD_DESC);
        oprot.writeString(struct.sender);
        oprot.writeFieldEnd();
      }
      if (struct.receivers != null) {
        oprot.writeFieldBegin(RECEIVERS_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, struct.receivers.size()));
          for (String _iter3 : struct.receivers)
          {
            oprot.writeString(_iter3);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class RequestTupleSchemeFactory implements SchemeFactory {
    public RequestTupleScheme getScheme() {
      return new RequestTupleScheme();
    }
  }

  private static class RequestTupleScheme extends TupleScheme<Request> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Request struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetRqid()) {
        optionals.set(0);
      }
      if (struct.isSetAid()) {
        optionals.set(1);
      }
      if (struct.isSetDid()) {
        optionals.set(2);
      }
      if (struct.isSetDatasize()) {
        optionals.set(3);
      }
      if (struct.isSetRemainingsize()) {
        optionals.set(4);
      }
      if (struct.isSetSender()) {
        optionals.set(5);
      }
      if (struct.isSetReceivers()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetRqid()) {
        oprot.writeString(struct.rqid);
      }
      if (struct.isSetAid()) {
        oprot.writeString(struct.aid);
      }
      if (struct.isSetDid()) {
        oprot.writeString(struct.did);
      }
      if (struct.isSetDatasize()) {
        oprot.writeI64(struct.datasize);
      }
      if (struct.isSetRemainingsize()) {
        oprot.writeI64(struct.remainingsize);
      }
      if (struct.isSetSender()) {
        oprot.writeString(struct.sender);
      }
      if (struct.isSetReceivers()) {
        {
          oprot.writeI32(struct.receivers.size());
          for (String _iter4 : struct.receivers)
          {
            oprot.writeString(_iter4);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Request struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.rqid = iprot.readString();
        struct.setRqidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.aid = iprot.readString();
        struct.setAidIsSet(true);
      }
      if (incoming.get(2)) {
        struct.did = iprot.readString();
        struct.setDidIsSet(true);
      }
      if (incoming.get(3)) {
        struct.datasize = iprot.readI64();
        struct.setDatasizeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.remainingsize = iprot.readI64();
        struct.setRemainingsizeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.sender = iprot.readString();
        struct.setSenderIsSet(true);
      }
      if (incoming.get(6)) {
        {
          org.apache.thrift.protocol.TSet _set5 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.receivers = new HashSet<String>(2*_set5.size);
          String _elem6;
          for (int _i7 = 0; _i7 < _set5.size; ++_i7)
          {
            _elem6 = iprot.readString();
            struct.receivers.add(_elem6);
          }
        }
        struct.setReceiversIsSet(true);
      }
    }
  }

}

