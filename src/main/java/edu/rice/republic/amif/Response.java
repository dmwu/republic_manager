/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package edu.rice.republic.amif;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2018-03-26")
public class Response implements org.apache.thrift.TBase<Response, Response._Fields>, java.io.Serializable, Cloneable, Comparable<Response> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Response");

  private static final org.apache.thrift.protocol.TField RQID_FIELD_DESC = new org.apache.thrift.protocol.TField("rqid", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField RPID_FIELD_DESC = new org.apache.thrift.protocol.TField("rpid", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("code", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField ACCEPTEDSIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("acceptedsize", org.apache.thrift.protocol.TType.I64, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ResponseStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ResponseTupleSchemeFactory());
  }

  public String rqid; // required
  public int rpid; // required
  /**
   * 
   * @see ResponseType
   */
  public ResponseType type; // required
  public long code; // required
  public long acceptedsize; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    RQID((short)1, "rqid"),
    RPID((short)2, "rpid"),
    /**
     * 
     * @see ResponseType
     */
    TYPE((short)3, "type"),
    CODE((short)4, "code"),
    ACCEPTEDSIZE((short)5, "acceptedsize");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // RQID
          return RQID;
        case 2: // RPID
          return RPID;
        case 3: // TYPE
          return TYPE;
        case 4: // CODE
          return CODE;
        case 5: // ACCEPTEDSIZE
          return ACCEPTEDSIZE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __RPID_ISSET_ID = 0;
  private static final int __CODE_ISSET_ID = 1;
  private static final int __ACCEPTEDSIZE_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.RQID, new org.apache.thrift.meta_data.FieldMetaData("rqid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "RequestID")));
    tmpMap.put(_Fields.RPID, new org.apache.thrift.meta_data.FieldMetaData("rpid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "ResponseID")));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, ResponseType.class)));
    tmpMap.put(_Fields.CODE, new org.apache.thrift.meta_data.FieldMetaData("code", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "ResponseCode")));
    tmpMap.put(_Fields.ACCEPTEDSIZE, new org.apache.thrift.meta_data.FieldMetaData("acceptedsize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "Bytes")));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Response.class, metaDataMap);
  }

  public Response() {
  }

  public Response(
    String rqid,
    int rpid,
    ResponseType type,
    long code,
    long acceptedsize)
  {
    this();
    this.rqid = rqid;
    this.rpid = rpid;
    setRpidIsSet(true);
    this.type = type;
    this.code = code;
    setCodeIsSet(true);
    this.acceptedsize = acceptedsize;
    setAcceptedsizeIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Response(Response other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetRqid()) {
      this.rqid = other.rqid;
    }
    this.rpid = other.rpid;
    if (other.isSetType()) {
      this.type = other.type;
    }
    this.code = other.code;
    this.acceptedsize = other.acceptedsize;
  }

  public Response deepCopy() {
    return new Response(this);
  }

  @Override
  public void clear() {
    this.rqid = null;
    setRpidIsSet(false);
    this.rpid = 0;
    this.type = null;
    setCodeIsSet(false);
    this.code = 0;
    setAcceptedsizeIsSet(false);
    this.acceptedsize = 0;
  }

  public String getRqid() {
    return this.rqid;
  }

  public Response setRqid(String rqid) {
    this.rqid = rqid;
    return this;
  }

  public void unsetRqid() {
    this.rqid = null;
  }

  /** Returns true if field rqid is set (has been assigned a value) and false otherwise */
  public boolean isSetRqid() {
    return this.rqid != null;
  }

  public void setRqidIsSet(boolean value) {
    if (!value) {
      this.rqid = null;
    }
  }

  public int getRpid() {
    return this.rpid;
  }

  public Response setRpid(int rpid) {
    this.rpid = rpid;
    setRpidIsSet(true);
    return this;
  }

  public void unsetRpid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RPID_ISSET_ID);
  }

  /** Returns true if field rpid is set (has been assigned a value) and false otherwise */
  public boolean isSetRpid() {
    return EncodingUtils.testBit(__isset_bitfield, __RPID_ISSET_ID);
  }

  public void setRpidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RPID_ISSET_ID, value);
  }

  /**
   * 
   * @see ResponseType
   */
  public ResponseType getType() {
    return this.type;
  }

  /**
   * 
   * @see ResponseType
   */
  public Response setType(ResponseType type) {
    this.type = type;
    return this;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  public long getCode() {
    return this.code;
  }

  public Response setCode(long code) {
    this.code = code;
    setCodeIsSet(true);
    return this;
  }

  public void unsetCode() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CODE_ISSET_ID);
  }

  /** Returns true if field code is set (has been assigned a value) and false otherwise */
  public boolean isSetCode() {
    return EncodingUtils.testBit(__isset_bitfield, __CODE_ISSET_ID);
  }

  public void setCodeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CODE_ISSET_ID, value);
  }

  public long getAcceptedsize() {
    return this.acceptedsize;
  }

  public Response setAcceptedsize(long acceptedsize) {
    this.acceptedsize = acceptedsize;
    setAcceptedsizeIsSet(true);
    return this;
  }

  public void unsetAcceptedsize() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ACCEPTEDSIZE_ISSET_ID);
  }

  /** Returns true if field acceptedsize is set (has been assigned a value) and false otherwise */
  public boolean isSetAcceptedsize() {
    return EncodingUtils.testBit(__isset_bitfield, __ACCEPTEDSIZE_ISSET_ID);
  }

  public void setAcceptedsizeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ACCEPTEDSIZE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case RQID:
      if (value == null) {
        unsetRqid();
      } else {
        setRqid((String)value);
      }
      break;

    case RPID:
      if (value == null) {
        unsetRpid();
      } else {
        setRpid((Integer)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((ResponseType)value);
      }
      break;

    case CODE:
      if (value == null) {
        unsetCode();
      } else {
        setCode((Long)value);
      }
      break;

    case ACCEPTEDSIZE:
      if (value == null) {
        unsetAcceptedsize();
      } else {
        setAcceptedsize((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case RQID:
      return getRqid();

    case RPID:
      return getRpid();

    case TYPE:
      return getType();

    case CODE:
      return getCode();

    case ACCEPTEDSIZE:
      return getAcceptedsize();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case RQID:
      return isSetRqid();
    case RPID:
      return isSetRpid();
    case TYPE:
      return isSetType();
    case CODE:
      return isSetCode();
    case ACCEPTEDSIZE:
      return isSetAcceptedsize();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Response)
      return this.equals((Response)that);
    return false;
  }

  public boolean equals(Response that) {
    if (that == null)
      return false;

    boolean this_present_rqid = true && this.isSetRqid();
    boolean that_present_rqid = true && that.isSetRqid();
    if (this_present_rqid || that_present_rqid) {
      if (!(this_present_rqid && that_present_rqid))
        return false;
      if (!this.rqid.equals(that.rqid))
        return false;
    }

    boolean this_present_rpid = true;
    boolean that_present_rpid = true;
    if (this_present_rpid || that_present_rpid) {
      if (!(this_present_rpid && that_present_rpid))
        return false;
      if (this.rpid != that.rpid)
        return false;
    }

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    boolean this_present_code = true;
    boolean that_present_code = true;
    if (this_present_code || that_present_code) {
      if (!(this_present_code && that_present_code))
        return false;
      if (this.code != that.code)
        return false;
    }

    boolean this_present_acceptedsize = true;
    boolean that_present_acceptedsize = true;
    if (this_present_acceptedsize || that_present_acceptedsize) {
      if (!(this_present_acceptedsize && that_present_acceptedsize))
        return false;
      if (this.acceptedsize != that.acceptedsize)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_rqid = true && (isSetRqid());
    list.add(present_rqid);
    if (present_rqid)
      list.add(rqid);

    boolean present_rpid = true;
    list.add(present_rpid);
    if (present_rpid)
      list.add(rpid);

    boolean present_type = true && (isSetType());
    list.add(present_type);
    if (present_type)
      list.add(type.getValue());

    boolean present_code = true;
    list.add(present_code);
    if (present_code)
      list.add(code);

    boolean present_acceptedsize = true;
    list.add(present_acceptedsize);
    if (present_acceptedsize)
      list.add(acceptedsize);

    return list.hashCode();
  }

  @Override
  public int compareTo(Response other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetRqid()).compareTo(other.isSetRqid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRqid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rqid, other.rqid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRpid()).compareTo(other.isSetRpid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRpid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rpid, other.rpid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCode()).compareTo(other.isSetCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.code, other.code);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAcceptedsize()).compareTo(other.isSetAcceptedsize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAcceptedsize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.acceptedsize, other.acceptedsize);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Response(");
    boolean first = true;

    sb.append("rqid:");
    if (this.rqid == null) {
      sb.append("null");
    } else {
      sb.append(this.rqid);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("rpid:");
    sb.append(this.rpid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("type:");
    if (this.type == null) {
      sb.append("null");
    } else {
      sb.append(this.type);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("code:");
    sb.append(this.code);
    first = false;
    if (!first) sb.append(", ");
    sb.append("acceptedsize:");
    sb.append(this.acceptedsize);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ResponseStandardSchemeFactory implements SchemeFactory {
    public ResponseStandardScheme getScheme() {
      return new ResponseStandardScheme();
    }
  }

  private static class ResponseStandardScheme extends StandardScheme<Response> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Response struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // RQID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.rqid = iprot.readString();
              struct.setRqidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // RPID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.rpid = iprot.readI32();
              struct.setRpidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.type = edu.rice.republic.amif.ResponseType.findByValue(iprot.readI32());
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.code = iprot.readI64();
              struct.setCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ACCEPTEDSIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.acceptedsize = iprot.readI64();
              struct.setAcceptedsizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Response struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.rqid != null) {
        oprot.writeFieldBegin(RQID_FIELD_DESC);
        oprot.writeString(struct.rqid);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(RPID_FIELD_DESC);
      oprot.writeI32(struct.rpid);
      oprot.writeFieldEnd();
      if (struct.type != null) {
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        oprot.writeI32(struct.type.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CODE_FIELD_DESC);
      oprot.writeI64(struct.code);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ACCEPTEDSIZE_FIELD_DESC);
      oprot.writeI64(struct.acceptedsize);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ResponseTupleSchemeFactory implements SchemeFactory {
    public ResponseTupleScheme getScheme() {
      return new ResponseTupleScheme();
    }
  }

  private static class ResponseTupleScheme extends TupleScheme<Response> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Response struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetRqid()) {
        optionals.set(0);
      }
      if (struct.isSetRpid()) {
        optionals.set(1);
      }
      if (struct.isSetType()) {
        optionals.set(2);
      }
      if (struct.isSetCode()) {
        optionals.set(3);
      }
      if (struct.isSetAcceptedsize()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetRqid()) {
        oprot.writeString(struct.rqid);
      }
      if (struct.isSetRpid()) {
        oprot.writeI32(struct.rpid);
      }
      if (struct.isSetType()) {
        oprot.writeI32(struct.type.getValue());
      }
      if (struct.isSetCode()) {
        oprot.writeI64(struct.code);
      }
      if (struct.isSetAcceptedsize()) {
        oprot.writeI64(struct.acceptedsize);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Response struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.rqid = iprot.readString();
        struct.setRqidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.rpid = iprot.readI32();
        struct.setRpidIsSet(true);
      }
      if (incoming.get(2)) {
        struct.type = edu.rice.republic.amif.ResponseType.findByValue(iprot.readI32());
        struct.setTypeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.code = iprot.readI64();
        struct.setCodeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.acceptedsize = iprot.readI64();
        struct.setAcceptedsizeIsSet(true);
      }
    }
  }

}

